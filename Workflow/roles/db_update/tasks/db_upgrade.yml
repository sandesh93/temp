---

- block:
# check if .sql file present or not
    - name: check if DBQueries file present or not
      stat: path="{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/Service_node/Upgrade/DBQueries1.sql"
      register: SqlFilestat
      with_items: "{{ node_name }}"
#    - name: fail if file is not there
#      fail: msg="DBQueries1.sql file does not exists in required path"
#      when: not item.stat.exists
#      with_items: "{{ SqlFilestat.results }}"
    - set_fact:
        SQL_File_exists_zsn: true
      when: item.stat.exists
      with_items: "{{ SqlFilestat.results }}"

    - set_fact:
        SQL_File_exists_zsn: false
      when: not item.stat.exists
      with_items: "{{ SqlFilestat.results }}"

    - block: 
        - name: update log4j template
          template:
            src: "{{ build_local_server_path }}/{{ build_folder }}/DB/SQL/log4j.j2"
            dest: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/log4j.properties"
            owner: webtech
            group: analytics
            mode: 0775
          with_items: "{{ node_name }}"

    # This block will get DB conectivity details for zsn node
        - name: check if jdbc.properties file present or not
          file:
            path: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties"
            state: touch
            owner: webtech
            group: analytics
            mode: 0775
          with_items: "{{ node_name }}"

        - name: empty the jdbc.properties file
          shell: truncate {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties --size 0
          with_items: "{{ node_name }}"

        - file:
            path: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/log.txt"
            state: touch
            owner: webtech
            group: analytics
            mode: 0775
          with_items: "{{ node_name }}"

    #Get DB values from server.xml
        - name: Get URL values from server.xml file
          shell: runuser -l webtech -c "cd  {{ item.tomcat_build_path }}/{{ build_folder }}/DB/ && java -cp lib/zyutil-bond-17.10.1.0.jar com.zycus.util.file.ServerXMLParser {{ item.tomcat_path }}/{{ item.tomcat_folder }}/conf/server.xml {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties zsn.oracle.url //Server/Service/Engine/Host/Context[@path=\"'/zsn'\"]/Resource/@url >> {{ item.tomcat_build_path }}/{{ build_folder }}/DB/log.txt"
          with_items: "{{ node_name }}"
        - shell: cat {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties | grep "zsn.oracle.url" | cut -d'=' -f2
          register: db_urlReg
          with_items: "{{ node_name }}"
        - set_fact: db_url="{{ item.stdout }}"
          with_items: "{{ db_urlReg.results }}"

        - name: Get username values from server.xml file
          shell:  runuser -l webtech -c "cd  {{ item.tomcat_build_path }}/{{ build_folder }}/DB/ && java -cp lib/zyutil-bond-17.10.1.0.jar com.zycus.util.file.ServerXMLParser {{ item.tomcat_path }}/{{ item.tomcat_folder }}/conf/server.xml {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties zsn.oracle.username  //Server/Service/Engine/Host/Context[@path=\"'/zsn'\"]/Resource/@username >> {{ item.tomcat_build_path }}/{{ build_folder }}/DB/log.txt"
          with_items: "{{ node_name }}"
        - shell: cat {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties | grep "zsn.oracle.username" | cut -d'=' -f2
          register: db_usernameReg
          with_items: "{{ node_name }}"
        - set_fact: db_username="{{ item.stdout }}"
          with_items: "{{ db_usernameReg.results }}"

        - name: Get password values from server.xml file
          shell:  runuser -l webtech -c "cd  {{ item.tomcat_build_path }}/{{ build_folder }}/DB/ && java -cp lib/zyutil-bond-17.10.1.0.jar com.zycus.util.file.ServerXMLParser {{ item.tomcat_path }}/{{ item.tomcat_folder }}/conf/server.xml {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties zsn.oracle.password  //Server/Service/Engine/Host/Context[@path=\"'/zsn'\"]/Resource/@password >> {{ item.tomcat_build_path }}/{{ build_folder }}/DB/log.txt"
          with_items: "{{ node_name }}"
        - shell: cat {{ item.tomcat_build_path }}/{{ build_folder }}/DB/jdbc.properties | grep "zsn.oracle.password" | cut -d'=' -f2
          register: db_passwordReg
          with_items: "{{ node_name }}"
        - set_fact: db_password="{{ item.stdout }}"
          with_items: "{{ db_passwordReg.results }}"

        - debug: var=db_url

    # Split the url to get type, host, port and db_name
        - name: check if there is backslash present or not in db_type
          set_fact: CheckSlash_dbtype="{{ db_url.split(':')[1][-1] }}"
        - name: Get DB type if there is no backslash
          set_fact: db_type="{{ db_url.split(':')[1] | replace(' ','') }}"
          when: CheckSlash_dbtype != "\\"
        - name: Get DB type if there is backslash at the end of string
          set_fact: dbTypeSplit="{{ db_url.split(':')[1] }}"
          when: CheckSlash_dbtype == "\\"
        - shell: echo {{ dbTypeSplit }} | tr --delete \\
          register: DBTypeReg
          when: CheckSlash_dbtype == "\\"
        - set_fact: db_type="{{ DBTypeReg.stdout | replace(' ','') }}"
          when: CheckSlash_dbtype == "\\"

        - name: check if there is backslash present or not in db_hostname
          set_fact: CheckSlash_dbhostname="{{ db_url.split(':')[3][-1] }}"
        - name: Get DB type if there is no backslash
          set_fact: db_host="{{ db_url.split(':')[3][1:] | replace(' ','') }}"
          when: CheckSlash_dbhostname != "\\"
        - name: Get DB type if there is backslash at the end of string
          set_fact: dbhostnameSplit="{{ db_url.split(':')[3][1:]  }}"
          when: CheckSlash_dbhostname == "\\"
        - shell: echo {{ dbhostnameSplit }} | tr --delete \\
          register: DBhostReg
          when: CheckSlash_dbhostname == "\\"
        - set_fact: db_host="{{ DBhostReg.stdout | replace(' ','') }}"
          when: CheckSlash_dbhostname == "\\"

        - name: Get DB port
          shell: echo {{ db_url }} | cut -d'@' -f 2 | cut -d'/' -f 1 | cut -d':' -f 2
          register: db_RegPort
        - set_fact: db_port="{{ db_RegPort.stdout }}"

        - name: Get DB name
          shell: echo {{ db_url }} | cut -d'@' -f 2 | cut -d"/" -f 2| cut -d':' -f 3
          register: db_RegName
        - set_fact: db_name="{{ db_RegName.stdout }}"

    # Fill the values in databaseDetails.properties file
        - name: Create DatabaseDetails.properties file
          file: path="{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/databaseDetails.properties" state=touch
          with_items: "{{ node_name }}"

        - name: empty the databaseDetails.properties file
          shell: truncate {{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/databaseDetails.properties --size 0
          with_items: "{{ node_name }}"

        - name: Add the details in properties file
          blockinfile:
            dest: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/databaseDetails.properties"
            block: |
                ConnectionCount=1
                Delimiter=GO
                Application_Node_Type=tomcat
                DatabaseCategory_1=Service_node
                database_port_1={{ db_port }}
                database_password_1={{ db_password }}
                database_user_1={{ db_username }}
                database_host_1={{ db_host }}
                database_type_1={{ db_type }}
                database_name_1={{ db_name }}
                file_list_1=1
            owner: webtech
            group: analytics
            mode: 0775
          with_items: "{{ node_name }}"

    # copy prerequisite
        - name: delete DBQueries1.sql if present in zsn node
          file: path= "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/Service_node/DBQueries1.sql" state=absent
          with_items: "{{ node_name }}"

        - name: copy .sql file to DB/SQL/Service_node/
          copy:
            src: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/Service_node/Upgrade/DBQueries1.sql"
            dest: "{{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/Service_node/DBQueries1.sql"
            remote_src: true
          with_items: "{{ node_name }}"

        - name: dos2unix for the queries
          shell: dos2unix {{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/Service_node/DBQueries1.sql
          with_items: "{{ node_name }}"

    #Run the executor
        - name: Run sql jar for DB upgrade
          shell: runuser -l webtech -c 'cd {{ item.tomcat_build_path }}/{{ build_folder }}/DB/SQL/; java -jar ZycusSqlExecutor-1.2.1.jar'
          register: DBUpgradeOP
          with_items: "{{ node_name }}"
        - fail: msg=" {{ product }} zsn Alter Execution Failed. Upgrade Failed.Exiting.. DB RollBack Needed"
          when: item.stderr == 1
          with_items: "{{ DBUpgradeOP.results }}"
      when: SQL_File_exists_zsn
  when: node_name | selectattr(search_key,'equalto',search_val) | list | count > 0
  vars:
    search_key: name
    search_val: service_node