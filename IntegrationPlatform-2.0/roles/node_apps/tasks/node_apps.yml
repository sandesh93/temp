---
- name: Check if Node app exists or not
  stat: path="{{ item.application_node_path }}/package/"
  register: node_app_path_op
  with_items: "{{ node_name }}"

- name: create backup folder
  file: path="{{ backup_path }}Release_{{ git_tag }}_{{ NewBuildNumber.stdout }}/{{ item.name }}" state=directory recurse=yes mode=0755
  with_items:
    - "{{ node_name }}"

- name: Backup the existing Node Application
  command: mv "{{ item.0.application_node_path }}/package/" "{{ backup_path }}Release_{{ git_tag }}_{{ NewBuildNumber.stdout }}/{{ item.0.name }}/"
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ node_app_path_op.results }}"

- name: extract build
  unarchive:
    src: "{{ build_local_server_path }}{{ node_app_name }}-{{ node_app_version }}.tgz"
    dest: "{{ item.application_node_path }}/"
    owner: webtech
    group: analytics
    mode: '0775'
    remote_src: 'no'
  with_items:
    - "{{ node_name }}"

- name: Change ownership of package directory
  shell: "chown -R webtech:analytics {{ application_node_path }}/package/"
  with_items:
    - "{{ node_name }}"
    
- name: delete the Node archive
  file: path="{{ item.application_node_path }}/{{ node_app_name }}-{{ node_app_version }}.tgz" state=absent
  with_items:
    - "{{ node_name }}"

- name: Link packages based on npm dependencies specified in config-vars
  shell: chdir="{{ application_node_path }}/package/" npm link "{{ item }}"
  become_user: webtech
  with_items:
    - "{{ npm_dependencies }}"