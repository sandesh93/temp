---

- name: Check if lock file present or not
  stat: path="/tmp/haproxy_temp.lock"
  register: lockfile

- name: Wait if lock file present
  wait_for:
    path: "/tmp/haproxy_temp.lock"
    state: absent
    timeout: "{{ timeout_sec }}"
  when: lockfile.stat.exists

- name: Create new lock file for ha for this run
  file:
    path: "/tmp/haproxy_temp.lock"
    state: touch
    owner: webtech
    group: analytics
    mode: 0777		

# Create dummy templates to validate
- name: Delete if any temp-validation folder is already existing (especialy usefuly for first time installtion - break and reinstall)
  file: 
    path: "/tmp/havalidate"
    state: absent

- name: Create temp validation folder
  file:
    path: /tmp/havalidate/
    state: directory
    owner: webtech
    group: analytics        
    recurse: yes
    mode: 0775

# Template replacement for common ha configuration
- name: update common HA config with IP
  template:
    src: "templates/ha_dummy_conf.j2"
    dest: "/tmp/havalidate/01-common_dummy.cfg"
    owner: webtech
    group: analytics
    mode: '0775'

- name: Update the common_dummy file according to git vars
  blockinfile:
    dest: "/tmp/havalidate/01-common_dummy.cfg"
    block: "{{ common_haproxy_configs }}"
    marker: "# {mark} Config for {{ product }} Ansible managed block #"

# Template replacement for {{ product }} product related configuration
- name: update product specific HA with IP
  template:
    src: "{{ build_local_server_path }}builds/templates/ha_product_{{ product }}_conf.j2"
    dest: "/tmp/havalidate/{{ product }}_dummy_file.cfg"
    owner: webtech
    group: analytics
    mode: '0775'

- name: Add lines haproxy specific lines
  lineinfile:
    dest: "/tmp/havalidate/{{ product }}_dummy_file.cfg"
    insertafter: "^#{{ product }}_{{ item.0.name }}$"
    line: "{{ item.1 }}"
  with_subelements:
    - "{{ haconfig }}"
    - config

# Validate the HA configuration
- name: assemble all the conf files
  assemble:
    src: /tmp/havalidate/
    dest: /tmp/havalidate/final_config.cfg
    owner: webtech
    group: analytics
    mode: 0775

#- name: Validate the haproxy configuration file before deployment
#  shell: haproxy -c -f /tmp/havalidate/final_config.cfg

# Backup the existing files
- name: Create backup folder
  file:
    path: /etc/haproxy/old_config/{{ product }}/{{ git_tag }}_{{ NewBuildNumber.stdout }}/
    state: directory
    owner: webtech
    group: analytics        
    recurse: yes
    mode: 0775

- name: starting line number for {{ product }}
  shell: awk '/\#\ BEGIN\ Config\ for\ {{ product }}\ Ansible\ managed\ block\ \#/{print NR}' /etc/haproxy/conf/{{ conf_file_common }}
  register: startLine

- name: ending line number for {{ product }}
  shell: awk '/\#\ END\ Config\ for\ {{ product }}\ Ansible\ managed\ block\ \#/{print NR}' /etc/haproxy/conf/{{ conf_file_common }}
  register: endLine

- name: copy common config
  shell: sed -n '{{ (startLine.stdout|int)+1 }},{{ (endLine.stdout|int)-1 }}p' /etc/haproxy/conf/{{ conf_file_common }} > /etc/haproxy/old_config/{{ product }}/{{ git_tag }}_{{ NewBuildNumber.stdout }}/{{ conf_file_common }}

- name: check if product specific config exists ( useful for fresh installation, so that backup is not triggered)   
  stat: 
    path: "/etc/haproxy/conf/{{ conf_file_product }}"
    get_md5: yes
  register: HaConf_file_check	

- name: Backup the existing product specific configurations
  copy: 
    src: "/etc/haproxy/conf/{{ conf_file_product }}"
    dest: "/etc/haproxy/old_config/{{ product }}/{{ git_tag }}_{{ NewBuildNumber.stdout }}/{{ conf_file_product }}"
    remote_src: true	
  when: HaConf_file_check.stat.exists

# Compare the old and new config
- name: check the existing file config
  stat:
    path: "/etc/haproxy/old_config/{{ product }}/{{ git_tag }}_{{ NewBuildNumber.stdout }}/{{ conf_file_common }}"
    get_md5: yes
  register: HaOldConf_file_check

- name: set facts if the {{ conf_file_common }} file does not exists
  set_fact:
    HaOldConf_Common: "emptyValue"

- name: set facts if the {{ conf_file_common }} file exists
  set_fact:
    HaOldConf_Common: "{{ HaOldConf_file_check.stat.md5 }}"
  when: HaOldConf_file_check.stat.exists

- name: copy new conf to dummy files
  shell: echo "{{ common_haproxy_configs }}" > /tmp/havalidate/01-common_new_config.cfg

- name: check if there are any chnages in common.conf
  stat: 
    path: "/tmp/havalidate/01-common_new_config.cfg"
    get_md5: yes
  register: HaNewConf_Common

- name: check config of {{ product }}.conf
  stat: 
    path: "/tmp/havalidate/{{ product }}_dummy_file.cfg"
    get_md5: yes
  register: HaNewConf_product    

- name: set facts if the {{ product }}.conf file does not exists
  set_fact:
    HaConf: "emptyValue"

- name: set facts if the {{ product }}.conf file exists
  set_fact:
    HaConf: "{{ HaConf_file_check.stat.md5 }}"
  when: HaConf_file_check.stat.exists

# Replace the new files
- name: Update the common conf file according to git vars
  blockinfile:
    dest: "/etc/haproxy/conf/{{ conf_file_common }}"
    block: "{{ common_haproxy_configs }}"
    marker: "# {mark} Config for {{ product }} Ansible managed block #"
  when: HaOldConf_Common != HaNewConf_Common.stat.md5
  register: Ha_common_change

- name: Update the existing configurations for HA
  copy: 
    src: "/tmp/havalidate/{{ product }}_dummy_file.cfg"
    dest: "/etc/haproxy/conf/{{ conf_file_product }}"
    owner: webtech
    group: analytics
    mode: 0755
    remote_src: true
  when: HaConf != HaNewConf_product.stat.md5
  register: Ha_product_change

# Restart haproxy
- name: Restart HA proxy
  service: 
    name: haproxy
    state: restarted
  when: Ha_common_change.changed or Ha_product_change.changed

- name: Delete the created backup folder
  file: 
    path: "/tmp/havalidate"
    state: absent

- name: Delete the lock file
  file: 
    path: "/tmp/haproxy_temp.lock"
    state: absent