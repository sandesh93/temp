---

- name: Check if build folder exists or not
  stat: 
    path: "{{ backup_path }}Release_{{ git_tag }}_{{ existingBuildNumber }}/{{ item.name }}/{{ build_folder }}"
  register: old_build_folder_stat
  with_items: "{{ node_name }}"
- debug:
    var: old_build_folder_stat.results
- name: Remove the builds folder before restoring the backup
  file:
    path: "{{ item.0.tomcat_build_path }}/{{ build_folder }}"
    state: absent
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_build_folder_stat.results }}"    

- name: Replace build folder with the {{ git_tag }}_{{ existingBuildNumber }} backup
  shell: mv "{{ backup_path }}/Release_{{ git_tag }}_{{ existingBuildNumber }}/{{ item.0.name}}/{{ build_folder }}" "{{ item.0.tomcat_build_path }}/"
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_build_folder_stat.results }}"    

- name: verify the permissions to build folder
  file: 
    path: "{{ item.0.tomcat_build_path }}/{{ build_folder }}" 
    state: directory 
    owner: webtech 
    group: analytics 
    mode: 0775
    recurse: yes
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_build_folder_stat.results }}"

- name: Check if tomcat folder exists
  stat: 
    path: "{{ backup_path }}/Release_{{ git_tag }}_{{ existingBuildNumber }}/{{ item.name }}/{{ item.tomcat_folder }}"
  register: old_tomcat_folder_Stat
  with_items: "{{ node_name }}"

- name: Remove the tomcat folder before restoring the backup
  file:
    path: "{{ item.0.tomcat_path }}/{{ item.0.tomcat_folder }}"
    state: absent
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_tomcat_folder_Stat.results }}"

- name: Replace build folder with the {{ git_tag }}_{{ existingBuildNumber }} backup
  shell: mv "{{ backup_path }}/Release_{{ git_tag }}_{{ existingBuildNumber }}/{{ item.0.name }}/{{ item.0.tomcat_folder }}" "{{ item.0.tomcat_path }}/"
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_tomcat_folder_Stat.results }}"

- name: verify the permissions to tomcat folder
  file: 
    path: "{{ item.0.tomcat_path }}/{{ item.0.tomcat_folder }}" 
    state: directory 
    owner: webtech 
    group: analytics 
    mode: 0775
    recurse: yes
  when: "{{ item.1.stat.exists }}"
  with_together:
    - "{{ node_name }}"
    - "{{ old_tomcat_folder_Stat.results }}"

#Specific to fresh install
- name: Specific to fresh install - Check if node name is present in backup 
  stat: 
    path: "{{ backup_path }}/Release_{{ git_tag }}_{{ existingBuildNumber }}/{{ item.0.name }}"
  register: old_node_name_stat
  when: not "{{ item.1.stat.exists }}" == "1"
  with_together: 
    - "{{ node_name }}"  
    - "{{ old_build_folder_stat.results }}"

- name: Specific to fresh install - Remove the builds folder 
  file:
    path: "/U01/{{ product }}/{{ item.0.name }}"
    state: absent
  when: 
    - not old_build_folder_stat.results.0.stat.exists
    - item.1.stat.exists
  with_together:
    - "{{ node_name }}"
    - "{{ old_node_name_stat.results }}" 

# Compress and delete backup files
- name: Compress the backup folder
  shell: cd "{{ backup_path }}/" ; tar -cvzf "Release_{{ git_tag }}_{{ existingBuildNumber }}.tar.gz" "Release_{{ git_tag }}_{{ existingBuildNumber }}/"
  when: old_node_name_stat.results.0.stat.exists or old_build_folder_stat.results.0.stat.exists

- name: Delete the backup folder 
  file: 
    path: "{{ backup_path }}/Release_{{ git_tag }}_{{ existingBuildNumber }}/"
    state: absent
  ignore_errors: true
  when: old_node_name_stat.results.0.stat.exists or old_build_folder_stat.results.0.stat.exists